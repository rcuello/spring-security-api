######################################################
# Configuración General de la Aplicación
######################################################
# Nombre de la aplicación Spring Boot
spring.application.name=api-sec

# Puerto en el que se ejecutará la aplicación
server.port=9191

# Ruta base para las APIs de la aplicación
server.servlet.context-path=/api/v1

######################################################
# Configuración del Usuario por Defecto de Spring Security
######################################################
# Nombre de usuario por defecto
spring.security.user.name=usuario
# Contraseña por defecto
spring.security.user.password=pass123

######################################################
# Configuración de la Base de Datos
######################################################
# Configuración de Hibernate para la gestión de esquemas de la base de datos
# spring.jpa.hibernate.ddl-auto: Controla el comportamiento de Hibernate en la gestión de esquemas de la base de datos.
# Valores posibles:
#   - create: Crea el esquema de la base de datos al iniciar la aplicación y lo elimina al cerrarla.
#   - create-drop: Crea el esquema de la base de datos al iniciar la aplicación y lo elimina al cerrarla.
#   - update: Actualiza el esquema de la base de datos sin eliminarlo.
#   - validate: Valida el esquema de la base de datos sin realizar cambios.
#   - none: No realiza ninguna acción en el esquema de la base de datos.
# Uso recomendado:
#   - create-drop: Para entornos de desarrollo donde se desea reinicializar el esquema de la base de datos cada vez que se inicia y cierra la aplicación.
#   - create: Similar a create-drop, pero no elimina el esquema al cerrar la aplicación.
#   - update: Para entornos de desarrollo donde se desea mantener el esquema existente y solo realizar actualizaciones.
#   - validate: Para entornos de producción donde se desea validar que el esquema de la base de datos coincida con las entidades JPA.
#   - none: Para entornos de producción donde no se desea realizar ninguna acción en el esquema de la base de datos.
spring.jpa.hibernate.ddl-auto=update
# URL de conexión a la base de datos
spring.datasource.url=jdbc:mysql://localhost:4406/spring
# Nombre de usuario de la base de datos
spring.datasource.username=root
# Contraseña de la base de datos
spring.datasource.password=sup3rpwd34$
# Clase del controlador JDBC para MySQL
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Mostrar las consultas SQL en la consola
spring.jpa.show-sql=true

######################################################
# Configuración de Registro (Logging)
######################################################
# Nivel de registro para Spring Security
logging.level.org.springframework.security=DEBUG

######################################################
# Configuración del JWT (JSON Web Token)
######################################################
# Tiempo de expiración del token en minutos
security.jwt.expiration-in-minutes=30
# Clave secreta para firmar los tokens JWT
# La contraseña "MiSuperContraseñaSegura1234567890ABCDEFGHIJKLM" ha sido codificada a base64 https://www.base64encode.org/
# La contraseña debe ser de al menos 256 bits (43 caracteres aproximadamente)
security.jwt.secret-key=TWlTdXBlckNvbnRyYXNlw7FhU2VndXJhMTIzNDU2Nzg5MEFCQ0RFRkdISUpLTE0=

######################################################
# Configuración de Paginación para Spring Data Web
######################################################
# Parámetro de página en las solicitudes
spring.data.web.pageable.page-parameter=p
# Parámetro de tamaño de página en las solicitudes
spring.data.web.pageable.size-parameter=limit